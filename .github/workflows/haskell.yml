name: Haskell CI

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - dev
      - main

jobs:
  build:
    strategy:
      matrix:
#        os: [ubuntu-latest, macOS-latest, windows-latest]
        os: [ubuntu-latest]
        plan:
          - { build: stack }
#          - { build: cabal, ghc: "8.8.3", cabal-install: "latest" }
        include:
          - os: ubuntu-latest
            apt-get: graphviz texlive-base texlive-latex-base
        exclude:
          - os: windows-latest
            plan: { cabal-install: "latest" }

    runs-on: ${{ matrix.os }}

    steps:
    - name: Install ${{ matrix.os }} Packages
      uses: mstksg/get-package@v1
      with:
        apt-get: ${{ matrix.apt-get }}
        brew: ${{ matrix.brew }}
    - uses: actions/checkout@v2

    - name: Cache Stack on unix
      id: cache-stack-unix
      uses: actions/cache@v1
      with:
        path: ~/.stack
        key: ${{ matrix.os }}-${{ matrix.plan.build }}-stack-home-${{ hashFiles('stack.yaml') }}-${{ hashFiles('package.yaml') }}
      if: contains(matrix.os, 'windows') == false

    - name: Cache Stack on windows
      id: cache-stack-windows
      uses: actions/cache@v1
      with:
        path: ~/AppData/Local/Programs/stack
        key: ${{ matrix.os }}-${{ matrix.plan.build }}-stack-home-${{ hashFiles('stack.yaml') }}-${{ hashFiles('package.yaml') }}
      if: contains(matrix.os, 'windows')

    - name: Cache Cabal on unix
      id: cache-cabal-unix
      uses: actions/cache@v1
      with:
        path: ~/.cabal
        key: ${{ matrix.os }}-${{ matrix.plan.build }}-${{ matrix.plan.ghc }}-${{ matrix.plan.cabal-install }}-cabal-home-${{ hashFiles('**/*.cabal')}}-${{ hashFiles('package.yaml') }}
      if: matrix.plan.build == 'cabal' && contains(matrix.os, 'windows') == false

    - name: Cache Cabal on windows
      id: cache-cabal-windows
      uses: actions/cache@v1
      with:
        path: ~/AppData/Roaming/cabal
        key: ${{ matrix.os }}-${{ matrix.plan.build }}-${{ matrix.plan.ghc }}-${{ matrix.plan.cabal-install }}-cabal-home-${{ hashFiles('**/*.cabal')}}-${{ hashFiles('package.yaml') }}
      if: matrix.plan.build == 'cabal' && contains(matrix.os, 'windows')

    - name: Setup stack
      uses: haskell/actions/setup@v1
      with:
        enable-stack: true
        stack-no-global: true

    - name: Setup ghc ${{ matrix.plan.ghc }} and cabal-install ${{ matrix.plan.cabal-install }}
      uses: actions/setup-haskell@81544724478d8ba4d4e38eddea0351a215d25291
      with:
        ghc-version: ${{ matrix.plan.ghc }}
        cabal-version: ${{ matrix.plan.cabal-install }}
      if: matrix.plan.build == 'cabal'

    - name: Install dependencies on unix
      run: |
        set -ex
        case "$BUILD" in
          stack)
            stack --no-terminal --install-ghc $ARGS test --bench --only-dependencies
            ;;
          cabal)
            cabal --version
            cabal update
            PACKAGES=$(stack --install-ghc query locals | grep '^ *path' | sed 's@^ *path:@@')
            cabal install --overwrite-policy=always --only-dependencies --force-reinstalls --ghc-options=-O0 --reorder-goals --max-backjumps=-1 $CABALARGS $PACKAGES
            ;;
        esac
        set +ex
      env:
        ARGS: ${{ matrix.plan.resolver }}
        BUILD: ${{ matrix.plan.build }}
      if: contains(matrix.os, 'windows') == false

    - name: Install dependencies on windows
      shell: powershell
      run: |
        switch ( "${env:BUILD}" ) {
          "stack" {
            stack --no-terminal --install-ghc ${env:ARGS} test --bench --only-dependencies
          }
          "cabal" {
            cabal --version
            cabal update
            $PACKAGES=Invoke-Expression @'
              stack --no-terminal --install-ghc query locals | Select-String -Pattern '^ *path' | %{ $_ -replace '^ *path:', '' }
        '@
            cabal install --overwrite-policy=always --only-dependencies --force-reinstalls --ghc-options=-O0 --reorder-goals --max-backjumps=-1 ${env:CABALARGS} $PACKAGES
          }
          default {
            echo "invalid type $BUILD"
            exit 1
          }
        }
      env:
        ARGS: ${{ matrix.plan.resolver }}
        BUILD: ${{ matrix.plan.build }}
      if: contains(matrix.os, 'windows')

    - name: Build on unix
      run: |
        set -ex
        case "$BUILD" in
          stack)
            stack --no-terminal $ARGS test --bench --no-run-benchmarks --haddock --no-haddock-deps --test-arguments="--maximum-generated-tests=50"
            ;;
          cabal)
            PACKAGES=$(stack --install-ghc query locals | grep '^ *path' | sed 's@^ *path:@@')
            cabal install --overwrite-policy=always --ghc-options="-O0 -Wall -Werror" --reorder-goals --max-backjumps=-1 $CABALARGS $PACKAGES
            ORIGDIR=$(pwd)
            for dir in $PACKAGES
            do
              cd $dir
              # cabal check || [ "$CABALVER" == "1.16" ]
              # cabal sdist
              # PKGVER=$(cabal info . | awk '{print $2;exit}')
              # SRC_TGZ=$PKGVER.tar.gz
              # cd dist
              # tar zxfv "$SRC_TGZ"
              # cd "$PKGVER"
              cabal configure --ghc-options -O0
              cabal build
              cd $ORIGDIR
            done
            ;;
        esac
        set +ex
      env:
        ARGS: ${{ matrix.plan.resolver }}
        BUILD: ${{ matrix.plan.build }}
        CABALVER: ${{ matrix.plan.cabal-install }}
      if: contains(matrix.os, 'windows') == false

    - name: Build on windows
      shell: powershell
      run: |
        switch ( "${env:BUILD}" ) {
          "stack" {
            stack --no-terminal --install-ghc ${env:ARGS} test --bench --only-dependencies --test-arguments="--maximum-generated-tests=50"
          }
          "cabal" {
            $PACKAGES=Invoke-Expression @'
              stack --no-terminal --install-ghc query locals | Select-String -Pattern '^ *path' | %{ $_ -replace '^ *path:', '' }
        '@
            cabal install --overwrite-policy=always --force-reinstalls --ghc-options="-O0 -Wall -Werror" --reorder-goals --max-backjumps=-1 ${env:CABALARGS} $PACKAGES
            ORIGDIR=pwd
            foreach ($dir in $PACKAGES) {
              cd $dir
              # cabal check -or [ "${env:CABALVER}" == "1.16" ]
              # cabal sdist
              # PKGVER=Invoke-Expression @'
              #   cabal info . | ForEach-Object{($_ -split "\s+")[2]}
        # '@
              # SRC_TGZ=$PKGVER.tar.gz
              # cd dist
              # tar zxfv "$SRC_TGZ"
              # cd "$PKGVER"
              cabal configure --ghc-options -O0
              cabal build
              cd $ORIGDIR
            }
          }
          default {
            echo "invalid type ${env:BUILD}"
            exit 1
          }
        }
      env:
        ARGS: ${{ matrix.plan.resolver }}
        BUILD: ${{ matrix.plan.build }}
        CABALVER: ${{ matrix.plan.cabal-install }}
      if: contains(matrix.os, 'windows')
